{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/khahu/Desktop/API_Gateway_Microservices/frontend/nextApp/src/helper/auth.ts"],"sourcesContent":["import NextAuth from 'next-auth';\nimport GitHub from 'next-auth/providers/github';\nimport Credentials from 'next-auth/providers/credentials';\nimport type { Provider } from 'next-auth/providers';\n\nconst providers: Provider[] = [\n  GitHub({\n    clientId: process.env.GITHUB_ID,\n    clientSecret: process.env.GITHUB_SECRET,\n  }),\n  Credentials({\n    credentials: {\n      username: { label: 'Username', type: 'text' },\n      password: { label: 'Password', type: 'password' },\n    },\n    authorize: async (c) => {\n      // Demo account fallback\n      if (c?.username === 'toolpad-demo' && c?.password === '@demo1') {\n        return {\n          id: 'demo-id',\n          name: 'Toolpad Demo',\n          email: 'toolpad-demo@mui.com',\n        };\n      }\n\n      // Custom login logic\n      const response = await fetch(`http://localhost:5000/api/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          username: c?.username,\n          password: c?.password,\n        }),\n      });\n                  \n\n      const data = await response.json();\n      const { user, loginToken } = data;\n\n      if (user) {\n        return {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          image: user.image || null,\n          token: loginToken,\n        };\n      }\n      \n\n\n      return null;\n    },\n\n  }),\n];\n\nexport const providerMap = providers.map((provider) => {\n  if (typeof provider === 'function') {\n    const providerData = provider();\n    return { id: providerData.id, name: providerData.name };\n  }\n  return { id: provider.id, name: provider.name };\n});\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers,\n  secret: process.env.AUTH_SECRET,\n  pages: {\n    signIn: '/auth/login',\n  },\n  session: {\n    strategy: 'jwt',\n  },\ncallbacks: {\n  async jwt({ token, user, account, profile }) {\n    // Nếu login bằng GitHub\n    if (account?.provider === 'github' && profile) {\n      const githubProfile = profile as {\n        id: string;\n        name?: string;\n        login: string;\n        email: string;\n        avatar_url: string;\n      };\n\n      token.id = githubProfile.id;\n      token.name = githubProfile.name || githubProfile.login;\n      token.email = githubProfile.email;\n      token.image = githubProfile.avatar_url;\n    }\n\n\n    // Nếu login bằng Credentials (tài khoản của bạn)\n    if (user && account?.provider === 'credentials') {\n      token.id = user.id;\n      token.name = user.name;\n      token.email = user.email;\n      token.image = (user as any).image || null;\n      token.token = (user as any).token || null;\n      token.expires = (user as any).expires || null;\n    }\n\n    return token;\n  },\n\n  async session({ session, token }) {\n    if (token) {\n      session.user.id = token.id as string;\n      session.user.name = token.name as string;\n      session.user.email = token.email as string;\n      session.user.image = token.image as string;\n    }\n    return session;\n  },\n},\n\n});\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 203, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/khahu/Desktop/API_Gateway_Microservices/frontend/nextApp/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import { handlers } from '@/helper/auth';\r\n\r\nexport const { GET, POST } = handlers;\r\n"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,uHAAA,CAAA,WAAQ","debugId":null}}]
}